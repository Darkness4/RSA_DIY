package me.nguye.number

import io.kotest.core.spec.style.WordSpec
import io.kotest.data.forAll
import io.kotest.data.row
import io.kotest.matchers.shouldBe
import me.nguye.ecc.curves.Secp192r1

@ExperimentalUnsignedTypes
class PointEccTest : WordSpec({
    "scalarMultiply" should {
        "Test Secp192r1" {
            forAll(
                row(0, "0" to "0"),
                row(1, "602046282375688656758213480587526111916698976636884684818" to "174050332293622031404857552280219410364023488927386650641"),
                row(2, "5369744403678710563432458361254544170966096384586764429448" to "5429234379789071039750654906915254128254326554272718558123"),
                row(3, "2915109630280678890720206779706963455590627465886103135194" to "2946626711558792003980654088990112021985937607003425539581"),
                row(4, "1305994880430903997305943738697779408316929565234787837114" to "3981863977451150342116987835776121688410789618551673306674"),
                row(5, "410283251116784874018993562136566870110676706936762660240" to "1206654674899825246688205669651974202006189255452737318561"),
                row(6, "4008504146453526025173196900303594155799995627910231899946" to "3263759301305176906990806636587838100022690095020155627760"),
                row(7, "3473339081378406123852871299395262476289672479707038350589" to "2152713176906603604200842901176476029776544337891569565621"),
                row(8, "1167950611014894512313033362696697441497340081390841490910" to "4002177906111215127148483369584652296488769677804145538752"),
                row(9, "3176317450453705650283775811228493626776489433309636475023" to "44601893774669384766793803854980115179612118075017062201"),
            ) { idx, point ->
                val expected = PointEcc(BigUInt.valueOf(point.first), BigUInt.valueOf(point.second), Secp192r1)
                val p = Secp192r1.generator.scalarMultiply(BigUInt.valueOf(idx.toString()))
                p shouldBe expected
            }
        }
    }
})
